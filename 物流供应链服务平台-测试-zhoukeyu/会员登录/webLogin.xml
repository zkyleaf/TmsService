<?xml version="1.0" encoding="UTF-8"?>
<con:testCase id="f7db2df4-3355-4249-9952-f2f55ee7ef72" discardOkResults="true" failOnError="true" failTestCaseOnErrors="true" keepSession="false" name="webLogin" searchProperties="true" xmlns:con="http://eviware.com/soapui/config"><con:settings><con:setting id="f7db2df4-3355-4249-9952-f2f55ee7ef72fileName">webLogin</con:setting></con:settings><con:savedRecentRuns>1</con:savedRecentRuns><con:testStep type="properties" name="Properties" id="5bef41f1-580f-4331-baf0-1cac754ee534"><con:settings/><con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:properties><con:property><con:name>loginName</con:name><con:value>emt5U29hcFVJ</con:value></con:property><con:property><con:name>password</con:name><con:value>emt5MTIzNDU2</con:value></con:property></con:properties></con:config></con:testStep><con:testStep type="datagen" name="DataGen" id="449fcbc0-6daa-4bbf-8a97-7bdcb3e3f4d3" disabled="true"><con:settings/><con:config xsi:type="con:DataGeneratorStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:property type="Script"><con:configuration><script>def  tf_timestamp=new Date().format("yyyyMMddHHmmss")

	</script></con:configuration><con:name>tf_timestamp</con:name><con:mode>STEP</con:mode><con:shared>false</con:shared></con:property></con:config></con:testStep><con:testStep type="groovy" name="tf_sign11" id="b64c6be9-4f0c-49e8-8c07-d5ab7fa03cd1"><con:settings/><con:config><script><![CDATA[import java.io.UnsupportedEncodingException;
import java.security.MessageDigest;
import java.security.NoSuchAlgorithmException;
import java.util.Arrays;
import java.util.Map;
import groovy.json.JsonSlurper;

handleParamaters("会员登录","K77MFVhwk348J4h72nHi");

def void handleParamaters(String testStepName,String myKey)
{

	//如果没有有时间戳，请删除
	def time=new Date().format("yyyyMMddHHmmss")
	testRunner.testCase.getTestStepByName(testStepName).setPropertyValue("tf_timestamp",time)

	
	//自动获取参数
	List<String> list=testRunner.testCase.getTestStepByName(testStepName).getPropertyNames()
	Map<String, String> map = new HashMap<String, String>();
	for(int i=0;i<list.size();i++)
	{
//		if(!list.get(i).equals("RawRequest")&&list.get(i)!="ResponseAsXml"&&list.get(i)!="Domain"&&list.get(i)!="Password"&&list.get(i)!="Username"&&list.get(i)!="Response"&&list.get(i)!="Request"&&list.get(i)!="Endpoint"&&list.get(i)!="sign")
		if(!list.get(i).equals("RawRequest")&&list.get(i)!="ResponseAsXml"&&list.get(i)!="Domain"&&list.get(i)!="Password"&&list.get(i)!="Username"&&list.get(i)!="Response"&&list.get(i)!="Request"&&list.get(i)!="Endpoint"&&list.get(i)!="sign"&&list.get(i)!="HarResponse"&&list.get(i)!="RawResponse"&&list.get(i)!="callback"&&list.get(i)!="tf_ignore")
		{
			def res = context.expand(testRunner.testCase.getTestStepByName(testStepName).getPropertyValue(list.get(i)));
			log.info('res--------'+res);
			map.put(list.get(i),res);
		}
	}
	//加密
	String md5 = sign(map,myKey,"utf-8")
	//将加密值传给sign
	testRunner.testCase.getTestStepByName(testStepName).setPropertyValue("tf_sign",md5)
	
}

/**
	 * 签名字符串
	 * @param params
	 * @param key
	 * @param charset
	 * @return
	 */
def String sign(Map<String,String> params, String key, String charset) {

    	//1. tf_sign不加入签名
    	params.remove('tf_sign');
    	//2. 加入sk
    	params.put('dog_sk', key);
		//3. 对请求参数的值进行排序
		String keyString = createLinkString(params);
		//4. 生成md5
		return generateMd5(keyString, charset);
    }


    
    /**
     * 生成md5
     * @param key
     * @param charset
     * @return
     */
def String generateMd5(String keyString, String charset){
    	String result = '';
		try {
			MessageDigest md5 = MessageDigest.getInstance('MD5');
			md5.update(keyString.getBytes(charset));
			byte[] temp;
			temp = md5.digest(''.getBytes(charset));
			for (int i = 0; i < temp.length; i++) {
				result += Integer.toHexString(((int)0x000000ff & temp[i]) | (int)0xffffff00).substring(6);
			}	
			result = result.toUpperCase();
		} catch (NoSuchAlgorithmException e) {
			throw new RuntimeException('MD5签名过程中出现错误' + e);
		} catch (UnsupportedEncodingException e) {
			throw new RuntimeException('MD5签名过程中出现错误,指定的编码集不对,您目前指定的编码集是:' + charset);
		}    	
		return result;
    }




    /** 
     * 把数组所有元素排序，并参数值拼接成字符串
     * @param params 需要排序并参与字符拼接的参数组
     * @return 拼接后字符串
     */
def String createLinkString(Map<String, String> params) {
    	Object[] keys = params.keySet().toArray();
        Arrays.sort(keys);
        StringBuffer sb = new StringBuffer();
		for (int i = keys.length - 1; i >= 0; i--) {
			sb.append(params.get(keys[i]));
		}
        return sb.toString();
    }]]></script></con:config></con:testStep><con:testStep type="groovy" name="tf_sign" id="212d2dba-67cc-4052-b0a0-e0c4958fcbd4" disabled="true"><con:settings/><con:config><script><![CDATA[import java.security.MessageDigest;
import groovy.json.JsonSlurper;
import com.google.gson.Gson;

def testStepName="会员登录"
def myKey="K77MFVhwk348J4h72nHi"


	def time=new Date().format("yyyyMMddHHmmss")
	testRunner.testCase.getTestStepByName(testStepName).setPropertyValue("tf_timestamp",time)


	//自动获取参数
	List<String> list=testRunner.testCase.getTestStepByName(testStepName).getPropertyNames()
	log.info list
	Map<String, String> map = new HashMap<String, String>();
	for(int i=0;i<list.size();i++)
	{
		if(!list.get(i).equals("RawRequest")&&list.get(i)!="ResponseAsXml"&&list.get(i)!="Domain"&&list.get(i)!="Password"&&list.get(i)!="Username"&&list.get(i)!="Response"&&list.get(i)!="Request"&&list.get(i)!="Endpoint"&&list.get(i)!="sign"&&list.get(i)!="HarResponse"&&list.get(i)!="RawResponse"&&list.get(i)!="callback"&&list.get(i)!="tf_ignore")
		{
			def res = context.expand(testRunner.testCase.getTestStepByName(testStepName).getPropertyValue(list.get(i)));
			log.info(res);
			map.put(list.get(i),res);
		}
	}

	//加密
	md5=sign(map,myKey,'utf-8')

	//将加密值传给sign
	testRunner.testCase.getTestStepByName(testStepName).setPropertyValue("tf_sign",md5);//.toUpperCase())




	/**
	 * 签名字符串
	 * @param params
	 * @param key
	 * @param charset
	 * @return
	 */
def String sign(Map<String,String> params, String key, String charset) {

    	//1. tf_sign不加入签名
    	params.remove('tf_sign');
    	//2. 加入sk
    	params.put('dog_sk', key);
		//3. 对请求参数的值进行排序
		String keyString = createLinkString(params);
		//4. 生成md5
		return generateMd5(keyString, charset);
    }
    /**
     * 生成md5
     * @param key
     * @param charset
     * @return
     */
def String generateMd5(String keyString, String charset){
    	String result = '';
		try {
			MessageDigest md5 = MessageDigest.getInstance('MD5');
			md5.update(keyString.getBytes(charset));
			byte[] temp;
			temp = md5.digest(''.getBytes(charset));
			for (int i = 0; i < temp.length; i++) {
				result += Integer.toHexString(((int)0x000000ff & temp[i]) | (int)0xffffff00).substring(6);
			}	
			result = result.toUpperCase();
//		} catch (NoSuchAlgorithmException e) {
//			throw new RuntimeException('MD5签名过程中出现错误' + e);
		} catch (UnsupportedEncodingException e) {
			throw new RuntimeException('MD5签名过程中出现错误,指定的编码集不对,您目前指定的编码集是:' + charset);
		}    	
		return result;
    }

    /** 
     * 把数组所有元素排序，并参数值拼接成字符串
     * @param params 需要排序并参与字符拼接的参数组
     * @return 拼接后字符串
     */
def String createLinkString(Map<String, String> params) {
    	Object[] keys = params.keySet().toArray();
        Arrays.sort(keys);
        StringBuffer sb = new StringBuffer();
		for (int i = keys.length - 1; i >= 0; i--) {
			sb.append(params.get(keys[i]));
		}
        return sb.toString();
    }
]]></script></con:config></con:testStep><con:testStep type="restrequest" name="会员登录" id="4c129ea6-e666-41b4-8dcb-1be2a2687f7f"><con:settings/><con:config service="http://10.7.28.14" resourcePath="/passport/partycommonmanage/webLogin" methodName="Method 1" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="会员登录" id="c6591842-78d3-4cec-a58f-781e17e1fdd9" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://10.7.28.14</con:endpoint><con:request/><con:originalUri>http://10.7.28.14/passport/partycommonmanage/webLogin</con:originalUri><con:credentials><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters>
  <con:entry key="tf_timestamp" value="20181213095647"/>
  <con:entry key="clientdfp" value="wertyuighf"/>
  <con:entry key="password" value="${Properties#password}"/>
  <con:entry key="loginName" value="${Properties#loginName}"/>
  <con:entry key="tf_sign" value="48277D3454ABF025A19215033618335A"/>
</con:parameters><con:parameterOrder><con:entry>dog_ak</con:entry><con:entry>sourcecode</con:entry><con:entry>tf_timestamp</con:entry><con:entry>clientdfp</con:entry><con:entry>tf_ignore</con:entry><con:entry>loginName</con:entry><con:entry>password</con:entry><con:entry>clientIp</con:entry><con:entry>tf_sign</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:properties/><con:reportParameters/><con:breakPoints><con:testStepId>5bef41f1-580f-4331-baf0-1cac754ee534</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>449fcbc0-6daa-4bbf-8a97-7bdcb3e3f4d3</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>b64c6be9-4f0c-49e8-8c07-d5ab7fa03cd1</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>212d2dba-67cc-4052-b0a0-e0c4958fcbd4</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase>